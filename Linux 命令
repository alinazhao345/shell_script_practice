Linux 命令
find
	查找硬盘 速度很慢
	find ./ ! -type d -print
	find ./ -type d -print
	find ./ -type l -print
	find ./ -type f -print
	find . -depth -maxdepth -mindepth
	find . -name *password*
	find . ！ -name "*.txt"
	find . -name "*.txt" -exec rm {} \; 
	find . \(-name "*.txt" -o -name "*.pdf" \) -print
	find . -perm 7000 -exec ls -l {} \;
	find . -size 0 |xargs rm -rf &
	find . -mtime +3 -print | xargs rm -f -r     ==    find . -mtime +3 -exec rm -rf {} \;
	find . -mtime 0 	#0 代表当前时间,从现在开始到24小时之前
	find . -mtime 4 	#4 天前的24小时之内，也就是第4-5天
	find . -mtime -4 	#4 天内 被修改过的文件
	find . -mtime +4	#>=5天前的文件

locate
	在/var/lib/mlocate数据库中查找，会有数据库更新延迟
	locate -l 5 password #找出系统中与password相关的文件名，只列出5个

which
	在PATH路径下查找
	which -a 可执行文件  #查找所有同名的执行文件，而非第一个
whereis
	查找系统中某些特定目录下的文件

mkdir
	mkdir -p test1/test2/test3 加上-p可以设置多层目录

rmdir
	rmdir -p test1/test2/test3 加上-p可以删除多层目录，但如果test2中还有，则不能删除test2

ls
	ls -a
	ls -d

cp
	cp -a == cp -dr
	cp -u 复制新的，如果是旧的 则不复制

mv	
	mv -u move新的 如果是旧的 则不复制

cat
	cat file1 file2 |sort|uniq > file.txt  		#并集： 将两个文件合并，并去重放入file中
	cat file1 file2 |sort|uniq -d > file.txt 	#交集： 将两个文件的交集放入file中
	
	#先求交集，然后在file1中除去交集， 就得到差集
	cat file1 file2 |sort |uniq -d >temp.txt
	cat file1 temp.txt |sort| uniq -u > file.txt


tac
nl
	添加行号打印
more
less
head -n 20 1.txt
tail -n 10 1.txt
cat -n 1.txt | head -n 20 |tail -n 10 #查看文件第10-20行
uniq
	uniq -c	#在每列旁边显示该行 重复出现的次数
	uniq -d	#仅显示出现重复的行列
	uniq -u #仅显示出现一次的行

sort 
		sort -n file.txt |uniq	# 删除重复行
		sort file.txt |uniq -c  #统计各行在文件中出现的次数
		sort file.txt |uniq -d  #在文件中找出重复的行，显示那条重复的行
tr
	替换
	tr '[a-z]' '[A-Z]' 	#大小写替换
	tr -d ':'			#删除：
	tr -d '\r'

who/w
	目前已经登录系统的用户

last
	最近登录系统用户

id
	当前用户id

join
	join file1 file2	#将两个文件连接在一起

paste
	paste file1 file2 	#将两个文件两行连接在一起，拼的是列
	：EXAMPLE-------------------------------------------
	file1:
	1	11	111
	2	22	222

	file2:
	one	AA
	two BB

	paste之后结果为：
	1	11	111	one	AA
	2	22	222 two BB
	--------------------------------------------------

touch 
	创建新文件

tar
	打包
	tar -cvf file.tar ***file/directory**** 	#将文件/目录打包
	tar -xvf file.tar ./ 						#将文件解压
	
	-j 表示bz2形式压缩
	tar -jcvf log.tar.bz2 eod.log
	tar -jtvf log.tar.bz2 | grep 'shadow' 	#查找shadow文件
	tar -jxvf log.tar.bz2					#解压

	-z 表示gz形式压缩
	tar -zcvf log.tar.gz eod.log
	tar -ztvf log.tar.gz | grep 'shadow' 	#查找shadow文件
	tar -zxvf log.tar.gz					#解压	
unmount
	unmount /data/ 

fuser
	由文件/文件系统找出正在使用该文件的process
	-m 	#表示指定文件所在的文件系统或者块设备(处于mount状态)，所有访问该文件系统的进程都被列出。
	fuser -uv
	fuser -uv ./proc
	fuser -muv ./proc
	fuser -mki
	#之后可以用echo $$ 输出当前PID number
	fuser -k ./proc  	#kill所有正在使用./proc的进程

lsof 
	列出被进程所使用的文件名称
	lsof				#列出目前系统上所有已经被开启的文件与设备
	lsof -u root
	lsof +d /dev 		# +d表示目录，列出系统上所有正被使用的外接设备
	lsof -i:8080		#查询端口8080 
	lsof -i | grep PID 	#根据PID查端口
	lsof /bin/bash		#查找/bin/bash相关的进程


pidof 	
	#找出正在执行进程的PID
	pidof bash #正在执行bash的pid

ps
	ps -aux		#查看系统所有进程
	ps -lA 		#查看系统所有进程
	ps -l  		#查看与自己bash相关的进程
	ps -ef

top
	查看消耗CPU最多的进程
	Linux 内核产生的第一个进程systemd

&
	****命令*** &  	表示将命令置于后台运行

ctrl+z 
	****命令*** ctrl+Z 	表示将命令放置后台暂停
	****命令*** ctrl+Z 	>  将结果重定向到文件，不显示在屏幕

nohup	
	nohup ./***/cmd(or .sh ) & 		将***放置于后台执行，并且注销后还能执行

jobs
	jobs -l #查看后台任务list
	jobs -r #查看后台running的任务
	jobs -s #查看后台stopped的任务
	如果任务前面有+ 表示最近被放置于后台的
	如果任务前面有- 表示第二个被放置于后台的
	其他就不再有符号

fg
	foreground 将任务拿到前台运行
	fg 将 + 任务拿到前台运行
	fg %ID  将 ID 任务拿到前台运行

bg
	backgroud 将暂停下的任务拿到后台运行

kill 
	kill -l
	kill -9 PID 		强制杀死任务
	killall -9 httpd	强制杀死所有与程序httpd相关的进程
	ps aux | grep httpd | awk '{print $2}' |xargs kill -9
	kill -PID 			强制杀死一个任务
	kill -1 PID 		重新启动PID

nice
	给新命令设置新的nice值
	NI:调整进程优先级 -20~19
	nice -n -5  vim &  	#将丢于后台的vim命令NI设为5
	nice -n --5 vim &  	#将丢于后台的vim命令NI设为-5

renice
	给已存在命令调整nice值
	renice -5 %PID  	# 将PID NI值设为-5  ！！！注意这里-5 就直接为-5 与nice--5不同

free
	查看内存使用情况

df	
	df -hl 列出文件系统的整体磁盘使用量

du	
	列出当前目录下所有文件容量

su
	su 					#user 以root身份登录，需要root密码，PATH等环境变量认为user 本身， 不会切换为root
	su - 				#user 以root身份登录，读取login-shell文件，PATH等环境变量为root
	su -- 'cmd' 		#执行一次root命令，执行完就恢复本身
	su -l username 		#切换为其他用户
	sudo -u username	#切换为其他用户 仅需用自己的密码

cut
	分隔文本
	cut -f1 	test.txt		#仅显示第一字段
	cut -f2,3	test.txt 		#仅显示第二、三字段
	cut -f2,3 -d";"	test.txt 	#仅显示第二、三字段,用;分隔
	cut -c1-3 test.txt			#切出1-3字符

>
:> filename 	#将filename变为空文件
>				#overwrite
>>				#append
2 >>			#append标准错误
&>				
cmd > filename 2&>1	#将错误一并重定向

grep
	grep -e
	grep -E 	#将样式延伸为正则表达式来用
	grep -i 	#忽略大小写
	greo -w 	#只显示全是字符号的列
	grep -c 	#符合样式计数
	grep -v 	#反向显示

sed
	sed 's/word1/replace2/g'
	sed 's/word1/replace2/ig'	#替换忽略大小写
	sed 's/word1/replace2/2'	#从第2个匹配处开始替换
	sed -e 's/word1/{&}/g'		#将前面匹配到的字符替换为本身字符
	sed -i '1d' file.txt		#删除第一行，-i会直接修改原文件
	sed -i '$d' file.txt		#删除最后一行
	sed /er/d 	file.txt		#删除匹配到er的行
	sed '/^$/d'					#删除空白行
	sed -E 's/[0-9]{4} /**** /g' #替换

ln -s
	软链接，
	ln -s  file.txt/dir filesymlink
	不可以打开链接文件
	相对路径创建的软链接文件，一旦移动，就找不到相对的文件，所以要用绝对路径

	硬链接，
	ln file.txt filehardlink
	硬链接不可以链接目录，可以打开硬链接文件本身

netstat 
	netstat -a 显示各种网络相关信息，网络连接， 接口等
	netstat -at (tcp)
	netstat -l  #所有监听的服务状态

crontab
	* 	* 	* 	* 	* 	commds
	min hour date month weekday commds
	3,15   *     *     *  	*    commds		#每小时的3，15分钟执行
	3,15  8-11   *     *  	*    commds		#上午8-11点的每小时的3，15分钟执行
	3,15  8-11   */2   *  	*    commds		#每隔两天上午8-11点的每小时的3，15分钟执行
	3,15  8-11   *     *  	1-5  commds		#每周1-5 上午8-11点的每小时的3，15分钟执行
	30	  21     *     *  	*    commds		#每21：30执行
	
	45	  4      1,10,20  	*    * 		commds 	#每月1 10 20号 4：45执行
	10 	  1      *	   *  	*    1,6	commds	#每周1，6  	1:10执行
	0,30  18-23  *,	   *  	*    *		commds	#每18-23每隔30分钟执行
	*  	  */1	 *	   *  	*    *  	commds	#每1小时执行
	0	  23-7	 *	   *	*	 *		commds 	#23-7点每一小时

--------------------
bash相关
--------------------
$#	 	传递到脚本的参数个数
"$@" 	参数数组，每一个参数	
"$*" 	所有参数会作为一个字符串
$?		脚本退出状态，0表示正确，其他为有错
$$		表示当前shell的PID
$!		表示最近一次执行的后台命令的PID




-------------------EXAMPLE----------------------
./test.sh -f config.conf -v --prefix=/home
-----------------------------------------------
$0		./test.sh 本身
$1		-f
$2		config.conf
$#		参数个数为4 不包括命令本身


$(( 计算式 ))		#只能计算整数
var=`exp $a+$b`		#=两边不能有空格

declare -a var		#将var声明为数组
declare -i var		#将var声明为整数
declare	-x var		#将var变成环境变量
unset var			#删除变量

${array[@]}
readarray unix		#等待输入unix数组


格式1：test <测试表达式>
格式2：[<条件表达式>]
格式3：[[<条件表达式>]] 表示高级字符串处理函数,还可以使用匹配模式，从而定义与字符串相匹配的正则表达式。
双括号的作用：
在shell中，[ $a != 1 || $b = 2 ]是不允许出，要用[ $a != 1 ] || [ $b = 2 ]，而双括号就可以解决这个问题的，[[ $a != 1 || $b = 2 ]]。又比如这个[ "$a" -lt "$b" ]，也可以改成双括号的形式(("$a" < "$b"))


[ $var -eq 0 ]
[ -e $var ]			#变量var是否存在
[ -d $var ]			#变量var是否是目录
test -e $var 		#变量var是否存在
test -d $var 		#变量var是否是目录

[ $var1 = $var2 ]	#变量var1 var2 是否相等
[[ -z $str1 ]]		#如果str1 是空字符串，则返回真
[[ -n $str1 ]]		#如果str1是非空字符串，则返回真
[[ -v name ]]       #判断变量状态是否为set(见上一篇)
(( counter+1))		#(())这里只能用来计算数值 引用则为$(( counter+1 ))
[[ -d file ]]
[[ -e file ]]
[[ -f file ]]
[[ -r file ]]
[[ -w file ]]
[[ -x file ]]
[[ -s file ]]		#判断文件是否存在且内容不为空
[[ file1 -nt file2 ]]
[[ file1 -ot file2 ]]
[[ file1 -ef file2 ]] #判断file1 file2是否硬链接
[[ str1 == str2 ]]
[[ str1 != str2 ]]
[[ str1 < str2 ]]
[[ str1 > str2 ]]
[[ NUM1 -eq NUM2 ]]		#判断数字是否相等
[[ NUM1 -nq NUM2 ]]		#判断数字是否不相等
[[ NUM1 -lt NUM2 ]]		#判断 NUM1 < NUM2
[[ NUM1 -le NUM2 ]]
[[ NUM1 -gt NUM2 ]]
[[ NUM1 -ge NUM2 ]]


if [[ condition ]]; then
	#statements
elif [[ condition ]]; then
	#statements
else

fi


ping命令
ICMP internet control message protocol 也就是TCP/IP之间的子协议
ping www.baidu.com
ping发送ICMP,也会收到ICMP，并统计response time


















